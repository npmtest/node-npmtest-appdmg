{"/home/travis/build/npmtest/node-npmtest-appdmg/test.js":"/* istanbul instrument in package npmtest_appdmg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-appdmg/lib.npmtest_appdmg.js":"/* istanbul instrument in package npmtest_appdmg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_appdmg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_appdmg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-appdmg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-appdmg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_appdmg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_appdmg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_appdmg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_appdmg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_appdmg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_appdmg.__dirname + '/lib.npmtest_appdmg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/index.js":"module.exports = exports = require('./lib/appdmg')\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/appdmg.js":"var fs = require('fs')\nvar path = require('path')\n\nvar async = require('async')\nvar DSStore = require('ds-store')\nvar sizeOf = require('image-size')\nvar validator = require('is-my-json-valid')\nvar parseColor = require('parse-color')\n\nvar util = require('./util')\nvar hdiutil = require('./hdiutil')\nvar Pipeline = require('./pipeline')\nvar schema = require('../schema')\n\nvar validateSpec = validator(schema, {\n  formats: {\n    'css-color': function (text) {\n      return Boolean(parseColor(text).rgb)\n    }\n  }\n})\n\nfunction hasKeys (obj, props) {\n  function hasKey (key) { return obj.hasOwnProperty(key) }\n\n  return (props.filter(hasKey).length === props.length)\n}\n\nfunction parseOptions (options) {\n  if (typeof options !== 'object') {\n    throw new Error('`options` must be an object')\n  }\n\n  if (hasKeys(options, ['target']) === false) {\n    throw new Error('Missing option `target`')\n  }\n\n  var parsed = {}\n  var hasSource = hasKeys(options, ['source'])\n  var hasSpec = hasKeys(options, ['basepath', 'specification'])\n\n  if (hasSource === hasSpec) {\n    throw new Error('Supply one of `source` or `(basepath, specification)`')\n  }\n\n  if (hasSource) {\n    parsed.hasSpec = false\n    parsed.source = options.source\n    parsed.target = options.target\n    parsed.resolveBase = path.dirname(options.source)\n  }\n\n  if (hasSpec) {\n    parsed.hasSpec = true\n    parsed.target = options.target\n    parsed.opts = options.specification\n    parsed.resolveBase = options.basepath\n  }\n\n  return parsed\n}\n\nmodule.exports = exports = function (options) {\n  if (process.platform !== 'darwin') {\n    throw new Error('Platform not supported: ' + process.platform)\n  }\n\n  var global = parseOptions(options)\n  var resolvePath = function (to) {\n    return path.resolve(global.resolveBase, to)\n  }\n\n  var pipeline = new Pipeline()\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Looking for target', function (next) {\n    fs.exists(global.target, function (exists) {\n      if (exists) {\n        next(new Error('Target already exists'))\n      } else {\n        next(null)\n      }\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Reading JSON Specification', function (next) {\n    if (global.hasSpec) return next.skip()\n\n    fs.readFile(global.source, function (err, buffer) {\n      if (err && err.code === 'ENOENT' && err.path) {\n        next(new Error('JSON Specification not found at: ' + err.path))\n      } else {\n        global.specbuffer = buffer\n        next(err)\n      }\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Parsing JSON Specification', function (next) {\n    if (global.hasSpec) return next.skip()\n\n    try {\n      var obj = JSON.parse(global.specbuffer.toString())\n\n      if (obj.icons) {\n        var legacy = require('./legacy')\n        global.opts = legacy.convert(obj)\n      } else {\n        global.opts = obj\n      }\n\n      next(null)\n    } catch (err) {\n      next(err)\n    }\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Validating JSON Specification', function (next) {\n    if (validateSpec(global.opts)) return next(null)\n\n    function formatError (error) {\n      return error.field + ' ' + error.message\n    }\n\n    var message = validateSpec.errors.map(formatError).join(', ')\n\n    next(new Error(message))\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Looking for files', function (next) {\n    function find (type) {\n      return global.opts.contents.filter(function (e) {\n        return (e.type === type)\n      })\n    }\n\n    global.links = find('link')\n    global.files = find('file')\n\n    async.each(global.files, function (file, cb) {\n      var path = resolvePath(file.path)\n\n      fs.exists(path, function (exists) {\n        if (exists) {\n          cb(null)\n        } else {\n          cb(new Error('\"' + file.path + '\" not found at: ' + path))\n        }\n      })\n    }, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Calculating size of image', function (next) {\n    var dusm = util.dusm.bind(util)\n    var paths = global.files.map(function (e) { return resolvePath(e.path) })\n\n    async.map(paths, dusm, function (err, sizes) {\n      if (err) return next(err)\n\n      var megabytes = sizes.reduce(function (p, c) {\n        return p + c\n      }, 0)\n\n      // FIXME: I think that this has something to do\n      // with blocksize and minimum file size...\n      // This should work for now but requires more\n      // space than it should. Note that this does\n      // not effect the final image.\n      megabytes = megabytes * 1.5\n\n      global.megabytes = (megabytes + 32)\n      next(null)\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Creating temporary image', function (next) {\n    hdiutil.create(global.opts.title, global.megabytes + 'm', function (err, temporaryImagePath) {\n      if (err) return next(err)\n\n      pipeline.addCleanupStep('unlink-temporary-image', 'Removing temporary image', function (next) {\n        fs.unlink(temporaryImagePath, next)\n      })\n\n      global.temporaryImagePath = temporaryImagePath\n      next(null)\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Mounting temporary image', function (next) {\n    hdiutil.attach(global.temporaryImagePath, function (err, temporaryMountPath) {\n      if (err) return next(err)\n\n      pipeline.addCleanupStep('unmount-temporary-image', 'Unmounting temporary image', function (next) {\n        hdiutil.detach(temporaryMountPath, next)\n      })\n\n      global.temporaryMountPath = temporaryMountPath\n      next(null)\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Making hidden background folder', function (next) {\n    global.bkgdir = path.join(global.temporaryMountPath, '.background')\n    fs.mkdir(global.bkgdir, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Copying background', function (next) {\n    if (!global.opts.background) return next.skip()\n\n    var absolutePath = resolvePath(global.opts.background)\n    var retinaPath = absolutePath.replace(/\\.([a-z]+)$/, '@2x.$1')\n\n    var copyRetinaBackground = function (next) {\n      var originalExt = path.extname(global.opts.background)\n      var outputName = path.basename(global.opts.background, originalExt) + '.tiff'\n      var finalPath = path.join(global.bkgdir, outputName)\n      global.bkgname = path.join('.background', outputName)\n      util.tiffutil(absolutePath, retinaPath, finalPath, next)\n    }\n\n    var copyPlainBackground = function (next) {\n      var finalPath = path.join(global.bkgdir, path.basename(global.opts.background))\n      global.bkgname = path.join('.background', path.basename(global.opts.background))\n      util.cp(absolutePath, finalPath, next)\n    }\n\n    fs.exists(retinaPath, function (exists) {\n      if (exists) {\n        copyRetinaBackground(next)\n      } else {\n        copyPlainBackground(next)\n      }\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Reading background dimensions', function (next) {\n    if (!global.opts.background) return next.skip()\n\n    sizeOf(resolvePath(global.opts.background), function (err, value) {\n      if (err) return next(err)\n\n      global.bkgsize = [value.width, value.height]\n      next(null)\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Copying icon', function (next) {\n    if (global.opts.icon) {\n      var finalPath = path.join(global.temporaryMountPath, '.VolumeIcon.icns')\n      util.cp(resolvePath(global.opts.icon), finalPath, next)\n    } else {\n      next.skip()\n    }\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Setting icon', function (next) {\n    if (global.opts.icon) {\n      util.seticonflag(global.temporaryMountPath, next)\n    } else {\n      next.skip()\n    }\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Creating links', function (next) {\n    if (global.links.length === 0) {\n      return next.skip()\n    }\n\n    async.each(global.links, function (entry, cb) {\n      var name = entry.name || path.basename(entry.path)\n      var finalPath = path.join(global.temporaryMountPath, name)\n\n      fs.symlink(entry.path, finalPath, cb)\n    }, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Copying files', function (next) {\n    if (global.files.length === 0) {\n      return next.skip()\n    }\n\n    async.each(global.files, function (entry, cb) {\n      var name = entry.name || path.basename(entry.path)\n      var finalPath = path.join(global.temporaryMountPath, name)\n\n      util.sh('cp', ['-R', resolvePath(entry.path), finalPath], cb)\n    }, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Making all the visuals', function (next) {\n    var ds = new DSStore()\n\n    ds.vSrn(1)\n    ds.setIconSize(global.opts['icon-size'] || 80)\n\n    if (global.opts['background-color']) {\n      var rgb = parseColor(global.opts['background-color']).rgb\n      ds.setBackgroundColor(rgb[0] / 255, rgb[1] / 255, rgb[2] / 255)\n    }\n\n    if (global.opts.background) {\n      ds.setBackgroundPath(path.join(global.temporaryMountPath, global.bkgname))\n    }\n\n    if (global.opts.window && global.opts.window.size) {\n      ds.setWindowSize(global.opts.window.size.width, global.opts.window.size.height)\n    } else if (global.bkgsize) {\n      ds.setWindowSize(global.bkgsize[0], global.bkgsize[1])\n    } else {\n      ds.setWindowSize(640, 480)\n    }\n\n    if (global.opts.window && global.opts.window.position) {\n      ds.setWindowPos(global.opts.window.position.x, global.opts.window.position.y)\n    }\n\n    global.opts.contents.forEach(function (e) {\n      ds.setIconPos(e.name || path.basename(e.path), e.x, e.y)\n    })\n\n    ds.write(path.join(global.temporaryMountPath, '.DS_Store'), function (err) {\n      next(err)\n    })\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Blessing image', function (next) {\n    var args = []\n    args.push('--folder', global.temporaryMountPath)\n    args.push('--openfolder', global.temporaryMountPath)\n\n    util.sh('bless', args, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Unmounting temporary image', function (next) {\n    pipeline.runCleanup('unmount-temporary-image', next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.addStep('Finalizing image', function (next) {\n    var format = global.opts.format || 'UDZO'\n\n    hdiutil.convert(global.temporaryImagePath, format, global.target, next)\n  })\n\n  /**\n   **\n   **/\n\n  pipeline.expectAdditional(1)\n\n  return pipeline.run()\n}\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/bin/appdmg.js":"#!/usr/bin/env node\n\nprocess.title = 'appdmg'\n\nvar path = require('path')\nvar minimist = require('minimist')\nvar pkg = require('../package.json')\nvar appdmg = require('../index.js')\nvar colors = require('../lib/colors')\nvar repeatString = require('repeat-string')\n\nfunction maybeWithColor (color, text) {\n  if (!process.stderr.isTTY) return text\n\n  return colors[color](text)\n}\n\nprocess.on('uncaughtException', function (err) {\n  if (!argv.quiet) {\n    process.stderr.write('\\n')\n  }\n\n  if (argv === undefined || argv.verbose) {\n    process.stderr.write(err.stack + '\\n\\n')\n  }\n\n  process.stderr.write(maybeWithColor('red', err.name + ': ' + err.message) + '\\n')\n  process.exit(1)\n})\n\nvar usage = [\n  'Generate beautiful dmg-images for your OS X applications.',\n  '',\n  'Usage: appdmg <json-path> <dmg-path>',\n  '',\n  'json-path:  Path to the JSON Specification file',\n  'dmg-path:   Path at which to place the final dmg',\n  '',\n  'Options:',\n  '',\n  '-v, --verbose',\n  '    Verbose error output',\n  '',\n  '--quiet',\n  '    Suppresses progress output',\n  '',\n  '--help',\n  '    Display usage and exit',\n  '',\n  '--version',\n  '    Display version and exit',\n  ''\n].join('\\n')\n\nvar argv = minimist(process.argv.slice(2), {\n  boolean: [ 'verbose', 'quiet', 'help', 'version' ],\n  alias: { v: 'verbose' }\n})\n\nif (argv.version) {\n  process.stderr.write('node-appdmg v' + pkg.version + '\\n')\n  process.exit(0)\n}\n\nif (argv.help || argv._.length < 2) {\n  process.stderr.write(usage + '\\n')\n  process.exit(0)\n}\n\nif (argv._.length > 2) {\n  throw new Error('Too many arguments')\n}\n\nif (path.extname(argv._[0]) !== '.json') {\n  throw new Error('Input must have the .json file extension')\n}\n\nif (path.extname(argv._[1]) !== '.dmg') {\n  throw new Error('Output must have the .dmg file extension')\n}\n\nvar source = argv._[0]\nvar target = argv._[1]\nvar p = appdmg({ source: source, target: target })\n\np.on('progress', function (info) {\n  if (argv.quiet) return\n\n  if (info.type === 'step-begin') {\n    var line = '[' + (info.current <= 9 ? ' ' : '') + info.current + '/' + info.total + '] ' + info.title + '...'\n    process.stderr.write(line + repeatString(' ', 45 - line.length))\n  }\n\n  if (info.type === 'step-end') {\n    var op = ({\n      ok: ['green', ' OK '],\n      skip: ['yellow', 'SKIP'],\n      error: ['red', 'FAIL']\n    }[info.status])\n\n    process.stderr.write('[' + maybeWithColor(op[0], op[1]) + ']\\n')\n  }\n})\n\np.on('finish', function () {\n  if (argv.quiet) return\n\n  process.stderr.write('\\n' + maybeWithColor('green', 'Your image is ready:') + '\\n' + target + '\\n')\n})\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/colors.js":"\nvar reset = '\\u001b[0m'\nvar colors = {\n  black: '\\u001b[0;30m',\n  red: '\\u001b[0;31m',\n  green: '\\u001b[0;32m',\n  yellow: '\\u001b[0;33m',\n  blue: '\\u001b[0;34m',\n  purple: '\\u001b[0;35m',\n  cyan: '\\u001b[0;36m',\n  white: '\\u001b[0;37m'\n}\n\nObject.keys(colors).forEach(function (key) {\n  exports[key] = function (text) {\n    return colors[key] + text + reset\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/hdiutil.js":"var fs = require('fs')\nvar temp = require('fs-temp')\nvar util = require('./util')\n\nexports.convert = function (source, format, target, cb) {\n  var args = []\n  args.push('convert', source)\n  args.push('-format', format)\n  args.push('-imagekey', 'zlib-level=9')\n  args.push('-o', target)\n  util.sh('hdiutil', args, function (err) {\n    if (err) {\n      fs.unlink(target, function () {\n        cb(err)\n      })\n    } else {\n      cb(null, target)\n    }\n  })\n}\n\nexports.create = function (volname, size, cb) {\n  temp.template('%s.dmg').writeFile('', function (err, outname) {\n    if (err) return cb(err)\n\n    var args = [\n      'create', outname,\n      '-ov',\n      '-fs', 'HFS+',\n      '-size', size,\n      '-volname', volname\n    ]\n\n    util.sh('hdiutil', args, function (err) {\n      if (!err) return cb(null, outname)\n\n      fs.unlink(outname, function () {\n        cb(err)\n      })\n    })\n  })\n}\n\nexports.attach = function (path, cb) {\n  var args = []\n  args.push('attach', path)\n  args.push('-nobrowse')\n  args.push('-noverify')\n  args.push('-noautoopen')\n  util.sh('hdiutil', args, function (err, res) {\n    if (err) return cb(err)\n\n    var m = /Apple_HFS\\s+(.*)\\s*$/.exec(res.stdout)\n    if (m === null) return cb(new Error('Failed to mount image'))\n\n    cb(null, m[1])\n  })\n}\n\nexports.detach = function (path, cb) {\n  var args = []\n  args.push('detach', path)\n  util.sh('hdiutil', args, function (err) {\n    if (err && err.exitCode === 16 && /Resource busy/.test(err.stderr)) {\n      setTimeout(function () {\n        util.sh('hdiutil', args, function (err) { cb(err) })\n      }, 1000)\n    } else {\n      cb(err)\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/legacy.js":"function convert (src) {\n  var obj = {}\n\n  obj.title = src.title\n  obj.icon = src.icon\n  obj.background = src.background\n\n  obj['icon-size'] = src.icons.size\n\n  obj.contents = [\n    { x: src.icons.alias[0], y: src.icons.alias[1], type: 'link', path: '/Applications' },\n    { x: src.icons.app[0], y: src.icons.app[1], type: 'file', path: src.app }\n  ]\n\n  var extra = (src.extra || [])\n  extra.forEach(function (e) {\n    obj.contents.push({\n      x: e[1],\n      y: e[2],\n      type: 'file',\n      path: e[0]\n    })\n  })\n\n  return obj\n}\n\nexports.convert = convert\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/pipeline.js":"\nvar events = require('events')\n\nvar Pipeline = function () {\n  this.ee = null\n  this.steps = []\n  this.totalSteps = 0\n  this.currentStep = 0\n\n  this.cleanupList = []\n  this.cleanupStore = {}\n}\n\nPipeline.prototype._progress = function (obj) {\n  obj.current = this.currentStep\n  obj.total = this.totalSteps\n\n  this.ee.emit('progress', obj)\n}\n\nPipeline.prototype._runStep = function (step, nextAction, cb) {\n  var that = this\n\n  var next = function (err) {\n    if (err) {\n      that._progress({ type: 'step-end', status: 'error' })\n      that.runRemainingCleanups(function (err2) {\n        if (err2) console.error(err2)\n        cb(err)\n      })\n    } else {\n      that._progress({ type: 'step-end', status: 'ok' })\n      that[nextAction](cb)\n    }\n  }\n\n  next.skip = function () {\n    that._progress({ type: 'step-end', status: 'skip' })\n    that[nextAction](cb)\n  }\n\n  that.currentStep++\n  that._progress({ type: 'step-begin', title: step.title })\n  step.fn(next)\n}\n\nPipeline.prototype.addStep = function (title, fn) {\n  this.totalSteps++\n  this.steps.push({ title: title, fn: fn })\n}\n\nPipeline.prototype.addCleanupStep = function (id, title, fn) {\n  this.cleanupList.push(id)\n  this.cleanupStore[id] = { title: title, fn: fn }\n}\n\nPipeline.prototype.expectAdditional = function (n) {\n  this.totalSteps += n\n}\n\nPipeline.prototype.runCleanup = function (id, cb) {\n  var fn = this.cleanupStore[id].fn\n  var idx = this.cleanupList.indexOf(id)\n\n  if (idx === -1) throw new Error('No step with id: ' + id)\n\n  delete this.cleanupStore[id]\n  this.cleanupList.splice(idx, 1)\n\n  return fn(cb)\n}\n\nPipeline.prototype.runRemainingCleanups = function (cb) {\n  if (this.cleanupList.length === 0) return cb(null)\n\n  var that = this\n  var idx = that.cleanupList.length - 1\n  var id = that.cleanupList[idx]\n\n  var step = {\n    title: that.cleanupStore[id].title,\n    fn: function (cb) { that.runCleanup(id, cb) }\n  }\n\n  that._runStep(step, 'runRemainingCleanups', cb)\n}\n\nPipeline.prototype._run = function (cb) {\n  if (this.steps.length === 0) return this.runRemainingCleanups(cb)\n\n  var step = this.steps.shift()\n\n  this._runStep(step, '_run', cb)\n}\n\nPipeline.prototype.run = function () {\n  var ee = new events.EventEmitter()\n  this.ee = ee\n\n  process.nextTick(this._run.bind(this, function (err) {\n    if (err) {\n      ee.emit('error', err)\n    } else {\n      ee.emit('finish')\n    }\n  }))\n\n  return ee\n}\n\nmodule.exports = Pipeline\n","/home/travis/build/npmtest/node-npmtest-appdmg/node_modules/appdmg/lib/util.js":"var execa = require('execa')\nvar xattr = require('fs-xattr')\nvar cpFile = require('cp-file')\n\nexports.sh = function (prog, args, cb) {\n  execa(prog, args).then(function (result) {\n    setImmediate(cb, null, result)\n  }).catch(function (err) {\n    setImmediate(cb, err)\n  })\n}\n\nexports.cp = function (source, target, cb) {\n  cpFile(source, target).then(function () {\n    setImmediate(cb, null)\n  }).catch(function (err) {\n    setImmediate(cb, err)\n  })\n}\n\nexports.dusm = function (path, cb) {\n  exports.sh('du', ['-sm', path], function (err, res) {\n    if (err) return cb(err)\n\n    if (res.stderr.length > 0) {\n      return cb(new Error('du -sm: ' + res.stderr))\n    }\n\n    var m = /^([0-9]+)\\t/.exec(res.stdout)\n    if (m === null) {\n      console.log(res.stdout)\n      return cb(new Error('du -sm: Unknown error'))\n    }\n\n    return cb(null, parseInt(m[1], 10))\n  })\n}\n\nexports.tiffutil = function (a, b, out, cb) {\n  exports.sh('tiffutil', ['-cathidpicheck', a, b, '-out', out], function (err) { cb(err) })\n}\n\nexports.seticonflag = function (path, cb) {\n  var buf = new Buffer(32)\n  buf.fill(0)\n  buf.writeUInt8(4, 8)\n  xattr.set(path, 'com.apple.FinderInfo', buf, cb)\n}\n"}